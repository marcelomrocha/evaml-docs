{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"Home","text":""},{"location":"evaml-doc-sections/","title":"EvaML - Document Sections","text":"<p>We can see in Figure 2.1 an EvaML script that shows the document root element <code>&lt;evaml&gt;</code>, with its name attribute that defines the script name, and which contains the following three elements: the <code>&lt;settings&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;macros&gt;</code>.</p> <p></p> <p>Table 2.1 shows the root element of the EvaML document (<code>&lt;evaml&gt;</code>) and the elements <code>&lt;settings&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;macros&gt;</code> that represent the sections of the document. You can also observe the attributes of each element and its contents. In the attribute column, an underlined attribute indicates that it should be used. In the column of contents, occurrence indicators are used to indicate the order and number of times an element can occur. The \",\" (comma) symbol indicates that all child elements listed must be used in the sequence shown. The \"|\" (pipe bar) indicates that either element can occur within the parent element. The \"+\" (plus sign) symbol, on the other hand, indicates that the child element must appear one or more times. The \"*\" (asterisk) symbol indicates that the element may be used zero or more times within the parent element. The \"?\" (question mark) indicates that the element is optional, the element may not exist or there is only one occurrence of it.</p> Element Attributes Content evaml name (settings, script, macros?) settings (voice | lightEffects? | audioEffects?) script (random* | wait* | talk* | stop* | light* | goto* | motion* | loop* | userEmotion* | evaEmotion* | useMacro* | listen* | audio* | led* | counter* | switch*) macros (macro+) <p>Table: EvaML - Document Elements (Root and Main Elements)</p>"},{"location":"evaml-doc-sections/#settings-section","title":"Settings Section","text":"<p>In this first section, some global characteristics of the script are defined in the <code>&lt;settings&gt;</code> element. It is possible to define how the voice tone and the language in which the robot will communicate. It is also possible to define whether the generated code will perform light effects, sound effects or even play music. By configuring these parameters, it is possible to globally modify the operation of the script without having to directly change the definitions of its individual elements. Here is an example from the <code>&lt;settings&gt;</code> element.</p> settings_example.xml<pre><code>&lt;settings&gt;\n    &lt;voice tone=\"en-US_AllisonV3Voice\" /&gt;\n    &lt;lightEffects mode=\"ON\" /&gt;\n    &lt;audioEffects mode=\"ON\" /&gt;\n&lt;/settings&gt;\n</code></pre>"},{"location":"evaml-doc-sections/#script-section","title":"Script Section","text":"<p>The <code>&lt;script&gt;</code> element contains the sequence of commands that the robot must execute. We can see some of them on following code snippet. We can see in line 2 of the script, the <code>&lt;light&gt;</code> command that lights the smart bulb setting its color to blue. Next we have the <code>&lt;talk&gt;</code> command, which makes the robot say something, for example, introducing itself. The <code>&lt;wait&gt;</code> command on line 4 causes the script to pause for 2000 ms (2s). In the next line, the <code>&lt;audio&gt;</code> command plays an audio file named \"mario-start\". Then the robot speaks \"bye\" and turns off the smart bulb. A detailed explanation of each of these commands will be presented in Section 2.3.</p> script_example.xml<pre><code>&lt;script&gt;\n  &lt;light state=\"ON\" color=\"BLUE\" /&gt;\n  &lt;talk&gt;Hi, I am robot EVA&lt;/talk&gt;\n  &lt;wait duration=\"2000\" /&gt;\n  &lt;audio source=\"mario-start\" block=\"TRUE\" /&gt;\n  &lt;talk&gt;Bye&lt;/talk&gt;\n  &lt;light state=\"OFF\" /&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"evaml-doc-sections/#macros-section","title":"Macros Section","text":"<p>The <code>&lt;macros&gt;</code> element is one of the abstractions created in the EvaML language. As you can see in the next code snippet, it is possible to create macros that can be referenced within the <code>&lt;script&gt;</code> element. A macro has the id attribute that serves to identify it. These macros can be used within the <code>&lt;script&gt;</code> section using the <code>&lt;useMacro&gt;</code> command. The macro attribute of the command <code>&lt;useMacro&gt;</code> references the <code>&lt;macro&gt;</code> element defined in the <code>&lt;macros&gt;</code> section. During the parsing process of the EvaML document, macros are expanded with their code in the <code>&lt;script&gt;</code> section. There is no limit to the number of macros created, nor to the number of references to these macros within the script. As can be seen in Table 2.1 the macros section is not mandatory.</p> macros_example.xml<pre><code>&lt;script&gt;\n  &lt;useMacro macro=\"START\" /&gt;\n&lt;/script&gt;\n&lt;macros&gt;\n  &lt;macro id=\"START\"&gt;\n    &lt;talk&gt;Hello, I'm robot Eva. I'll pick a number from one to four&lt;/talk&gt;\n    &lt;talk&gt;For each one, I'll turn the bulb on in a different color&lt;/talk&gt;\n    &lt;talk&gt;I will only terminate when the number drawn is three&lt;/talk&gt;\n  &lt;/macro&gt;\n&lt;/macros&gt;\n</code></pre>"},{"location":"evaml/","title":"EvaML - An XML-Based Language for Affective Social Robots","text":""},{"location":"evaml/#introduction","title":"Introduction","text":"<p>When you have to choose between a Domain Specific Language (DSL) or a General Purpose Language (GPL), you have to choose between expressiveness and generality<sup>1</sup>. Within an application domain, DSLs have gains in expressiveness and ease of use compared to GPLs. DSLs also show gains in productivity, maintenance cost and requires less domain and user knowledge.</p> <p>With the objective of facilitating the development of interactive sessions by people with technical knowl- edge in programming, but also aiming to maintain the readability of the script codes, EvaML was created. It is an XML-based language for developing interactive sessions and makes it possible to create interaction scripts for the EVA robot using just a simple text editor. All the robot\u2019s multimodal interaction controls are present in EvaML, among them, the Light component control (which controls the smart bulb), the speech and voice recog- nition commands and the userEmotion command that enables the recognition of the user\u2019s facial expression through the webcam. The language also has elements for creating and manipulating variables, generating random numbers, conditional controls using switch and case elements and so on. The EvaML parser automatically generates a corresponding script to be run by the robot\u2019s hardware.</p> <p>In order to enable testing interactive sessions built with the EvaML language, an EVA robot simulator software was developed. EvaSIM is the software that simulates the robot\u2019s multimodal interaction elements and behavior. It has a display that shows the robot\u2019s eye expressions, simulates a smart light bulb, uses IBM Watson to transform text into speech, it simulates voice recognition capability (using a text-based interface), simulates facial expression recognition, can play audio files and so on. In addition to the robot components, the simulator also has a terminal emulator that displays the robot states and the actions being performed. It also displays the contents of the variables being used by the script being run. EvaSIM receives as input and executes the XML code generated by the EvaML parser. This manual presents the EvaML language, its structure as an XML document its elements and attributes. For each element of the language, XML code examples are presented.  </p> <p>Although the use of graphical tools makes an average user be productive, a user with advanced skills in the application domain can be reduced in efficiency<sup>2</sup>. The XML-based DSL development goals are: enabling greater control in the entry and editing of language commands and its respective parameters; adding abstractions of programming elements that aim to facilitate the construction of scripts and enabling the development of scripts independent of the robot's control interface, that is, using any text editor. The XML language has many advantages for developing DSLs:</p> <ol> <li>The XML language is more readable to non-programmers than the GPLs.</li> <li>In an XML-based DSL, the grammar can be described using DTD (Document Type Definition) or a document of type XML-Schema.</li> <li>It is simple to parse the XML structure using the DOM (Document Object Model). Therefore, we used the XML language and the tools related to it to propose and implement EvaML, the markup language to specify interactive sessions for robot EVA.</li> </ol> <p>References</p> <ol> <li> <p>Marjan Mernik, Jan Heering, and Anthony M Sloane. When and how to develop domain-specific languages. ACM computing surveys (CSUR), 37(4):316\u2013344, 2005.\u00a0\u21a9</p> </li> <li> <p>Marek Nov\u00e1k. Easy implementation of domain specific language using xml. In Proceedings of the 10th Scientific Conference of Young Researchers (SCYR 2010), Ko\u0161ice, Slovakia, volume 19. 2010.\u00a0\u21a9</p> </li> </ol>"}]}