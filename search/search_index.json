{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"Home","text":""},{"location":"evaml-doc-sections/","title":"EvaML - Document Sections","text":"<p>We can see in the next figure an EvaML script that shows the document root element <code>&lt;evaml&gt;</code>, with its <code>name</code> attribute that defines the script name, and which contains the following three elements: the <code>&lt;settings&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;macros&gt;</code>.</p> <p></p> Figure: EvaML - Document Sections <p></p> <p>The following table shows the root element of the EvaML document (<code>&lt;evaml&gt;</code>) and the elements <code>&lt;settings&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;macros&gt;</code> that represent the sections of the document. You can also observe the attributes of each element and its contents. In the attribute column, an underlined attribute indicates that it should be used. In the column of contents, occurrence indicators are used to indicate the order and number of times an element can occur. The \",\" (comma) symbol indicates that all child elements listed must be used in the sequence shown. The \"|\" (pipe bar) indicates that either element can occur within the parent element. The \"+\" (plus sign) symbol, on the other hand, indicates that the child element must appear one or more times. The \"*\" (asterisk) symbol indicates that the element may be used zero or more times within the parent element. The \"?\" (question mark) indicates that the element is optional, the element may not exist or there is only one occurrence of it.</p> Element Attributes Content evaml name (settings, script, macros?) settings (voice | lightEffects? | audioEffects?) script (random* | wait* | talk* | stop* | light* | goto* | motion* | loop* | userEmotion* | evaEmotion* | useMacro* | listen* | audio* | led* | counter* | switch*) macros (macro+) <p>Table: EvaML - Document Elements (Root and Main Elements)</p>"},{"location":"evaml-doc-sections/#settings-section","title":"Settings Section","text":"<p>In this section, some global characteristics of the script are defined in the <code>&lt;settings&gt;</code> element. It is possible to define how the voice tone and the language in which the robot will communicate. It is also possible to define whether the generated code will perform light effects, sound effects or even play music. By configuring these parameters, it is possible to globally modify the operation of the script without having to directly change the definitions of its individual elements. Here is an example from the <code>&lt;settings&gt;</code> element.</p> settings_example.xml<pre><code>&lt;settings&gt;\n  &lt;voice tone=\"en-US_AllisonV3Voice\" /&gt;\n  &lt;lightEffects mode=\"ON\" /&gt;\n  &lt;audioEffects mode=\"ON\" /&gt;\n&lt;/settings&gt;\n</code></pre>"},{"location":"evaml-doc-sections/#script-section","title":"Script Section","text":"<p>The <code>&lt;script&gt;</code> section contains the sequence of commands that the robot must execute. We can see some of them on following code snippet. We can see in line 2 of the script, the <code>&lt;light&gt;</code> command that lights the smart bulb setting its color to blue. Next we have the <code>&lt;talk&gt;</code> command, which makes the robot say something, for example, introducing itself. The <code>&lt;wait&gt;</code> command on line 4 causes the script to pause for 2000 ms (2s). In the next line, the <code>&lt;audio&gt;</code> command plays an audio file named \"mario-start\". Then the robot speaks \"Bye\" and turns off the smart bulb.</p> script_example.xml<pre><code>&lt;script&gt;\n  &lt;light state=\"ON\" color=\"BLUE\" /&gt;\n  &lt;talk&gt;Hi, I am robot EVA&lt;/talk&gt;\n  &lt;wait duration=\"2000\" /&gt;\n  &lt;audio source=\"mario-start\" block=\"TRUE\" /&gt;\n  &lt;talk&gt;Bye&lt;/talk&gt;\n  &lt;light state=\"OFF\" /&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"evaml-doc-sections/#macros-section","title":"Macros Section","text":"<p>The <code>&lt;macros&gt;</code> section is one of the abstractions created in the EvaML language. As you can see in the next code snippet, it is possible to create macros that can be referenced within the <code>&lt;script&gt;</code> element. A macro has the <code>id</code> attribute that serves to identify it. These macros can be used within the <code>&lt;script&gt;</code> section using the <code>&lt;useMacro&gt;</code> command. The <code>macro</code> attribute of the command <code>&lt;useMacro&gt;</code> references the <code>&lt;macro&gt;</code> element defined in the <code>&lt;macros&gt;</code> section. During the parsing process of the EvaML document, macros are expanded with their code in the <code>&lt;script&gt;</code> section. There is no limit to the number of macros created, nor to the number of references to these macros within the script. As can be seen in the table above, the <code>&lt;macros&gt;</code> section is not mandatory.</p> macros_example.xml<pre><code>&lt;script&gt;\n  &lt;useMacro macro=\"START\" /&gt;\n&lt;/script&gt;\n&lt;macros&gt;\n  &lt;macro id=\"START\"&gt;\n    &lt;talk&gt;Hello, I'm robot Eva. I'll pick a number from one to four&lt;/talk&gt;\n    &lt;talk&gt;For each one, I'll turn the bulb on in a different color&lt;/talk&gt;\n    &lt;talk&gt;I will only terminate when the number drawn is three&lt;/talk&gt;\n  &lt;/macro&gt;\n&lt;/macros&gt;\n</code></pre>"},{"location":"evaml/","title":"EvaML - An XML-Based Language for Affective Social Robots","text":""},{"location":"evaml/#introduction","title":"Introduction","text":"<p>When you have to choose between a Domain Specific Language (DSL) or a General Purpose Language (GPL), you have to choose between expressiveness and generality<sup>1</sup>. Within an application domain, DSLs have gains in expressiveness and ease of use compared to GPLs. DSLs also show gains in productivity, maintenance cost and requires less domain and user knowledge.</p> <p>With the objective of facilitating the development of interactive sessions by people with technical knowl- edge in programming, but also aiming to maintain the readability of the script codes, EvaML was created. It is an XML-based language for developing interactive sessions and makes it possible to create interaction scripts for the EVA robot using just a simple text editor. All the robot\u2019s multimodal interaction controls are present in EvaML, among them, the Light component control (which controls the smart bulb), the speech and voice recog- nition commands and the userEmotion command that enables the recognition of the user\u2019s facial expression through the webcam. The language also has elements for creating and manipulating variables, generating random numbers, conditional controls using switch and case elements and so on. The EvaML parser automatically generates a corresponding script to be run by the robot\u2019s hardware.</p> <p>In order to enable testing interactive sessions built with the EvaML language, an EVA robot simulator software was developed. EvaSIM is the software that simulates the robot\u2019s multimodal interaction elements and behavior. It has a display that shows the robot\u2019s eye expressions, simulates a smart light bulb, uses IBM Watson to transform text into speech, it simulates voice recognition capability (using a text-based interface), simulates facial expression recognition, can play audio files and so on. In addition to the robot components, the simulator also has a terminal emulator that displays the robot states and the actions being performed. It also displays the contents of the variables being used by the script being run. EvaSIM receives as input and executes the XML code generated by the EvaML parser. This manual presents the EvaML language, its structure as an XML document its elements and attributes. For each element of the language, XML code examples are presented.  </p> <p>Although the use of graphical tools makes an average user be productive, a user with advanced skills in the application domain can be reduced in efficiency<sup>2</sup>. The XML-based DSL development goals are: enabling greater control in the entry and editing of language commands and its respective parameters; adding abstractions of programming elements that aim to facilitate the construction of scripts and enabling the development of scripts independent of the robot's control interface, that is, using any text editor. The XML language has many advantages for developing DSLs:</p> <ol> <li>The XML language is more readable to non-programmers than the GPLs.</li> <li>In an XML-based DSL, the grammar can be described using DTD (Document Type Definition) or a document of type XML-Schema.</li> <li>It is simple to parse the XML structure using the DOM (Document Object Model). Therefore, we used the XML language and the tools related to it to propose and implement EvaML, the markup language to specify interactive sessions for robot EVA.</li> </ol> <p>References</p> <ol> <li> <p>Marjan Mernik, Jan Heering, and Anthony M Sloane. When and how to develop domain-specific languages. ACM computing surveys (CSUR), 37(4):316\u2013344, 2005.\u00a0\u21a9</p> </li> <li> <p>Marek Nov\u00e1k. Easy implementation of domain specific language using xml. In Proceedings of the 10th Scientific Conference of Young Researchers (SCYR 2010), Ko\u0161ice, Slovakia, volume 19. 2010.\u00a0\u21a9</p> </li> </ol>"},{"location":"commands/goto/","title":"Goto","text":"<p>The <code>&lt;goto&gt;</code> command switches the execution flow to the command with id referenced in its target attribute. The id attribute defines the label that will be used as a value in the target attribute of the <code>&lt;goto&gt;</code> command. In this example, the script is looped.</p> goto_example.xml<pre><code>&lt;script&gt;\n  &lt;light id=\"BEGIN\" state=\"ON\" color=\"RED\" /&gt;\n  &lt;wait duration=\"1000\" /&gt;\n  &lt;light state=\"OFF\" /&gt;\n  &lt;wait duration=\"1000\" /&gt;\n  &lt;goto target=\"BEGIN\" /&gt;\n&lt;/script&gt;\n</code></pre> <p>As can be seen in the table that presents the EvaML elements, in the Overview Section, some commands do not have the id attribute and therefore cannot be referenced as \"targets\" of <code>&lt;goto&gt;</code> commands. These are the commands: <code>&lt;voice&gt;</code>, <code>&lt;stop&gt;</code>, <code>&lt;goto&gt;</code>, <code>&lt;macro&gt;</code>, <code>&lt;useMacro&gt;</code>, <code>&lt;case&gt;</code> and <code>&lt;default&gt;</code>.</p>"},{"location":"commands/light/","title":"Light","text":"<p>The <code>&lt;light&gt;</code> command controls the smart bulb and has two attributes. The state, which can assume the values \"ON\" and \"OFF\" and the color attribute, which defines the bulb color. This color can be indicated using the RGB hexadecimal representation \"#00ff00\" or some of the elements from the predefined list: \"WHITE\", \"RED\", \"PINK\", \"GREEN\", \"YELLOW\", \"BLUE\".</p> light_example.xml<pre><code>&lt;script&gt;\n  &lt;light state=\"ON\" color=\"RED\" /&gt;\n  &lt;wait duration=\"1000\" /&gt;\n  &lt;light state=\"ON\" color=\"#00ff00\" /&gt;\n  &lt;wait duration=\"1000\" /&gt;\n  &lt;light state=\"ON\" color=\"BLUE\" /&gt;\n  &lt;wait duration=\"1000\" /&gt;\n  &lt;light state=\"OFF\" /&gt;\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>If the state is \"OFF\", the color attribute value will not be used. In this specific case, the color attribute can be ommited.</p>"},{"location":"commands/overview/","title":"EvaML - Commands","text":""},{"location":"commands/overview/#overview","title":"Overview","text":"<p>Before presenting each EvaML command with its description and usage examples, Table 2.2 shows EvaML elements that represent the language commands. Its attributes and what each element can contain will also be listed. For such representation, the same notation used in Table 2.1 will be used. The description of each symbol used can be seen in Section 2.2.</p> Command Attributes Content voice tone empty lightEffects mode empty audioEffects mode empty random id, min, max empty wait id, duration empty talk id text stop empty light id, state, color empty goto target empty motion id, type userEmotion id empty evaEmotion id, emotion empty useMacro macro empty listen id empty audio id, source, block empty led id, animation empty counter id, var, op, value empty switch id, var (case+, default?) macro id (random* | wait* | talk* | stop* | light* | goto* | motion* | loop* | userEmotion* | evaEmotion* | listen* | audio* | led* | counter* | switch*) case op, value (random* | wait* | talk* | stop* | light* | goto* | motion* | loop* | userEmotion* | evaEmotion* | useMacro* | listen* | audio* | led* | counter* | switch*) default (random* | wait* | talk* | stop* | light* | goto* | motion* | loop* | userEmotion* | evaEmotion* | useMacro* | listen* | audio* | led* | counter* | switch*) loop id, var, times (random* | wait* | talk* | stop* | light* | goto* | motion* | loop* | userEmotion* | evaEmotion* | useMacro* | listen* | audio* | led* | counter* | switch*) ... Faltam os comandos novos e as modifica\u00e7\u00f5es <p>Table: EvaML - Document Elements (Commands)</p>"},{"location":"commands/random/","title":"Random","text":"<p>The <code>&lt;random&gt;</code> command generates a random integer in the closed range [min, max]. The command has two attributes, min, representing the lower limit, and max, determining the upper limit of the random number to be generated. The value generated by the random function is stored in a special region of the robot\u2019s memory, which works with a array. The $ character accesses the element at the end of the array. This detail will be explained more clearly later in the text. In the following example, a random integer in the range [1, 3] will be generated and the robot will speak a text, including the generated value, using the $ character.</p> random_example.xml<pre><code>&lt;script&gt;\n    &lt;talk&gt;I will randomly choose a number from 1 to 3&lt;/talk&gt;\n    &lt;random min=\"1\" max=\"3\" /&gt;\n    &lt;talk&gt;The number drawn was $&lt;/talk&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"commands/stop/","title":"Stop","text":"<p>The <code>&lt;stop&gt;</code> command stops the script from running. In the following example, the command that lights the bulb green will not be executed, as the script is stopped by the command <code>&lt;stop&gt;</code>. The example is not very good, as it does not make sense to put any command after a <code>&lt;stop&gt;</code> command, but the purpose is just to show that the script will be terminated before the <code>&lt;light&gt;</code> command in line 5. The use of the <code>&lt;stop&gt;</code> command is best justified when used inside a <code>&lt;case&gt;</code> command in a <code>&lt;switch&gt;</code> block. Its use allows interrupting an execution flow created by the <code>&lt;case&gt;</code> command.</p> stop_example.xml<pre><code>&lt;script&gt;\n    &lt;light state=\"ON\" color=\"RED\" /&gt;\n    &lt;wait duration=\"1500\" /&gt;\n    &lt;stop /&gt;\n    &lt;light state=\"ON\" color=\"GREEN\" /&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"commands/talk/","title":"Talk","text":"<p>The  command makes the robot speak the specified text. The character $, by convention, in the original EVA language, accesses the value at the end of the array in memory that stores the answers returned by commands that interact with the user, such as the commands  and . As mentioned in Section 2.3.2, it also stores the value generated by the  command. Inside a text, you can use the character $ to include the last answer (a command  return, for example), $1 to include the first answer, or $-1 to include the second-to-last answer. Separating the sentences with the character / causes the robot to randomly speak one of the sentences. Let us look at an example that applies all these ideas. talk_example.xml<pre><code>&lt;script&gt;\n    &lt;talk&gt;What is your name?&lt;/talk&gt;\n    &lt;listen /&gt;\n    &lt;talk&gt;Hello $ / Hi $ / Hi $, how is it going&lt;/talk&gt;\n    &lt;random min=\"1\" max=\"3\" /&gt;\n    &lt;talk&gt;Hello $1, I sorted number $&lt;/talk&gt;\n&lt;/script&gt;\n</code></pre> <p>In this code snippet, the first <code>&lt;talk&gt;</code> command, in line 2, makes the robot ask for the username. Then the <code>&lt;listen&gt;</code> command causes the robot to capture the audio and send it to the Google API service which returns the audio converted to a string, which will contain the username. This value (in string format) is stored in the robot memory.</p> <p>In line 4, the command <code>&lt;talk&gt;</code> contains 3 sentences separated by the character /, which will make the robot, randomly, speak one of the sentences. These sentences contain the $ character which accesses the value at the end of the array in memory. This value is the answer obtained via the  command. The $ will be replaced with the username and then the resulting string will be sent to the IBM Watson TTS process. In the next line, the <code>&lt;random&gt;</code> command generates a random number between 1 and 3, inclusive, and stores it in the memory at the end of array. In line 6, the robot speaks the name of the person, that can be accessed by referring to $1 (first answer) and can reference the value generated by random using $ (last answer). The following figure shows this special region of EVA memory that functions like a array and can have its elements referenced by the $ character. The $1 represents the oldest element in the array and $ represents the newest element, while the $-1 represents the predecessor of $. <p> </p> Figure: The EVA Robot Memory Array View <p></p>"},{"location":"commands/voice/","title":"Voice","text":"<p>The <code>&lt;voice&gt;</code> command does not produce any action, it actually sets a parameter that defines, at the same time, the voice tone (its gender) to be used by the robot, and the language that will be taken into account during the Text-To-Speech (TTS) process from the IBM Watson service. It defines only one attribute, tone and as we presented previously, in the attribute column, an underlined attribute indicating that it should be used. As it is a configuration command, it is placed inside the <code>&lt;settings&gt;</code> section. In the following table, we can see a small list with some voice options for the robot. In the following code, we select the \"en-US_AllisonV3Voice\" option, which is female.</p> Code Gender Dialect pt-BR_IsabelaV3Voice Female Brazilian en-US_AllisonV3Voice Female American en-US_EmilyV3Voice Female American en-US_HenryV3Voice Male American es-LA_SofiaV3Voice Female Spanish (Latin American) es-ES_EnriqueV3Voice Female Spanish <p>Table: Voice options from IBM Watson (TTS)</p> <p> The following small code snippet shows the usage of the <code>&lt;voice&gt;</code> command.</p> voice_example.xml<pre><code>&lt;settings&gt;\n    &lt;voice tone=\"en-US_AllisonV3Voice\" /&gt;\n&lt;/settings&gt;\n</code></pre>"},{"location":"commands/wait/","title":"Wait","text":"<p>The <code>&lt;wait&gt;</code> command pauses the script execution. The duration attribute is expressed in milliseconds. In this example, the command causes the script to pause for one second (1000ms).</p> wait_example.xml<pre><code>&lt;script&gt;\n    &lt;talk&gt;I will wait for one second&lt;/talk&gt;\n    &lt;wait duration=\"1000\" /&gt;\n    &lt;talk&gt;Ready!&lt;/talk&gt;\n&lt;/script&gt;\n</code></pre>"}]}